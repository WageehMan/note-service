AWSTemplateFormatVersion: '2010-09-09'
Description: 'Notes Service - Complete Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

  PostgreSQLDatabase:
    Type: String
    Default: notesdb
    Description: PostgreSQL database name

  PostgreSQLUsername:
    Type: String
    Default: notesuser
    Description: PostgreSQL username

  PostgreSQLPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL password
    MinLength: 8

  BedrockModelId:
    Type: String
    Description: AWS Bedrock Model ID for summarization
    Default: anthropic.claude-3-haiku-20240307-v1:0

  LambdaS3Bucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages

  NoteCrudLambdaKey:
    Type: String
    Description: S3 key for NOTE CRUD Lambda zip file
    Default: note-crud-lambda.zip

  SummarizeLambdaKey:
    Type: String
    Description: S3 key for Summarize Lambda zip file
    Default: summarize-lambda.zip

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t4g.micro
    Description: RDS instance type

Resources:
  # ========================================
  # VPC and Networking (Move to top to avoid circular dependencies)
  # ========================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-notes-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-subnet-2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-subnet-2'

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-rt'

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ========================================
  # Security Groups
  # ========================================
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-lambda-sg'
      GroupDescription: Lambda security group
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-lambda-sg'

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-db-sg'
      GroupDescription: Database security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-db-sg'

  # ========================================
  # RDS PostgreSQL
  # ========================================
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${Environment}-db-subnet-group'
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-db-subnet-group'

  NotesDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${Environment}-notes-db'
      DBName: !Ref PostgreSQLDatabase
      Engine: postgres
      EngineVersion: '15.7'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 20
      StorageType: gp3
      StorageEncrypted: true
      MasterUsername: !Ref PostgreSQLUsername
      MasterUserPassword: !Ref PostgreSQLPassword
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 7
      MultiAZ: false
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-notes-db'
        - Key: Environment
          Value: !Ref Environment

  # ========================================
  # SNS Topic for Note Events
  # ========================================
  NoteEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-note-events'
      DisplayName: Note Events Topic
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: NoteService

  # ========================================
  # SQS Dead Letter Queue
  # ========================================
  SummarizeDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-summarize-dlq'
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: NoteService

  # ========================================
  # SQS Queue for Summarization
  # ========================================
  SummarizeQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-summarize-queue'
      VisibilityTimeout: 300
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SummarizeDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: NoteService

  # ========================================
  # SQS Queue Policy
  # ========================================
  SummarizeQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SummarizeQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SummarizeQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref NoteEventsTopic

  # ========================================
  # SNS Subscription to SQS
  # ========================================
  NoteEventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref NoteEventsTopic
      Endpoint: !GetAtt SummarizeQueue.Arn
      RawMessageDelivery: true

  # ========================================
  # IAM Role for NOTE CRUD Lambda
  # ========================================
  NoteCrudLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-NoteCrudLambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: NoteCrudLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NoteEventsTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Environment}-note-crud:*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: NoteService

  # ========================================
  # IAM Role for Summarize Lambda
  # ========================================
  SummarizeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-SummarizeLambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SummarizeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt SummarizeQueue.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Environment}-summarize:*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: NoteService

  # ========================================
  # CloudWatch Log Groups
  # ========================================
  NoteCrudLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Environment}-note-crud'
      RetentionInDays: 14

  SummarizeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Environment}-summarize'
      RetentionInDays: 14

  # ========================================
  # NOTE CRUD Lambda Function
  # ========================================
  NoteCrudLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - NoteCrudLogGroup
      - NotesDatabase
    Properties:
      FunctionName: !Sub '${Environment}-note-crud'
      Runtime: dotnet8
      Handler: NoteCrud::NoteCrud.Function::FunctionHandler
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref NoteCrudLambdaKey
      Role: !GetAtt NoteCrudLambdaRole.Arn
      Timeout: 30
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DB_HOST: !GetAtt NotesDatabase.Endpoint.Address
          DB_PORT: !GetAtt NotesDatabase.Endpoint.Port
          DB_NAME: !Ref PostgreSQLDatabase
          DB_USER: !Ref PostgreSQLUsername
          DB_PASSWORD: !Ref PostgreSQLPassword
          SNS_TOPIC_ARN: !Ref NoteEventsTopic
          AWS_REGION_NAME: !Ref AWS::Region
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: NoteService

  # ========================================
  # Summarize Lambda Function
  # ========================================
  SummarizeLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - SummarizeLogGroup
      - NotesDatabase
    Properties:
      FunctionName: !Sub '${Environment}-summarize'
      Runtime: dotnet8
      Handler: Summarize::Summarize.Function::FunctionHandler
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref SummarizeLambdaKey
      Role: !GetAtt SummarizeLambdaRole.Arn
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DB_HOST: !GetAtt NotesDatabase.Endpoint.Address
          DB_PORT: !GetAtt NotesDatabase.Endpoint.Port
          DB_NAME: !Ref PostgreSQLDatabase
          DB_USER: !Ref PostgreSQLUsername
          DB_PASSWORD: !Ref PostgreSQLPassword
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          AWS_REGION_NAME: !Ref AWS::Region
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: NoteService

  # ========================================
  # SQS Event Source Mapping for Summarize Lambda
  # ========================================
  SummarizeLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SummarizeQueue.Arn
      FunctionName: !GetAtt SummarizeLambda.Arn
      BatchSize: 1
      Enabled: true

  # ========================================
  # API Gateway REST API
  # ========================================
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  NotesApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-notes-api'
      Description: Notes Service API
      EndpointConfiguration:
        Types:
          - REGIONAL

  NotesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt NotesApi.RootResourceId
      PathPart: notes
      RestApiId: !Ref NotesApi

  NoteByIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref NotesResource
      PathPart: '{id}'
      RestApiId: !Ref NotesApi

  # ========================================
  # API Gateway Methods
  # ========================================
  NotesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NotesApi
      ResourceId: !Ref NotesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NoteCrudLambda.Arn}/invocations'

  NotesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NotesApi
      ResourceId: !Ref NotesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NoteCrudLambda.Arn}/invocations'

  NoteByIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NotesApi
      ResourceId: !Ref NoteByIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NoteCrudLambda.Arn}/invocations'

  NoteByIdPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NotesApi
      ResourceId: !Ref NoteByIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NoteCrudLambda.Arn}/invocations'

  NoteByIdDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NotesApi
      ResourceId: !Ref NoteByIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NoteCrudLambda.Arn}/invocations'

  # ========================================
  # CORS Options Methods
  # ========================================
  NotesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NotesApi
      ResourceId: !Ref NotesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  NoteByIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NotesApi
      ResourceId: !Ref NoteByIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # ========================================
  # Lambda Permissions for API Gateway
  # ========================================
  NoteCrudLambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NoteCrudLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NotesApi}/*/*/*'

  # ========================================
  # API Gateway Deployment
  # ========================================
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - NotesGetMethod
      - NotesPostMethod
      - NoteByIdGetMethod
      - NoteByIdPutMethod
      - NoteByIdDeleteMethod
      - NotesOptionsMethod
      - NoteByIdOptionsMethod
    Properties:
      RestApiId: !Ref NotesApi
      Description: !Sub '${Environment} deployment'

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref NotesApi
      DeploymentId: !Ref ApiDeployment
      StageName: prod
      Description: Production stage
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true

  # ========================================
  # CloudWatch Alarms
  # ========================================
  NoteCrudErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-note-crud-errors'
      AlarmDescription: Alert when NOTE CRUD Lambda has errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref NoteCrudLambda

  SummarizeErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-summarize-errors'
      AlarmDescription: Alert when Summarize Lambda has errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SummarizeLambda

  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-summarize-dlq-messages'
      AlarmDescription: Alert when messages end up in DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SummarizeDeadLetterQueue.QueueName

# ========================================
# Outputs
# ========================================
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${NotesApi}.execute-api.${AWS::Region}.amazonaws.com/prod/notes'
    Export:
      Name: !Sub '${Environment}-NotesApiEndpoint'

  NoteCrudLambdaArn:
    Description: NOTE CRUD Lambda Function ARN
    Value: !GetAtt NoteCrudLambda.Arn

  SummarizeLambdaArn:
    Description: Summarize Lambda Function ARN
    Value: !GetAtt SummarizeLambda.Arn

  SNSTopicArn:
    Description: SNS Topic ARN for note events
    Value: !Ref NoteEventsTopic

  SQSQueueUrl:
    Description: SQS Queue URL for summarization
    Value: !Ref SummarizeQueue

  DBEndpoint:
    Description: RDS PostgreSQL endpoint
    Value: !GetAtt NotesDatabase.Endpoint.Address
    Export:
      Name: !Sub '${Environment}-DBEndpoint'

  DBPort:
    Description: RDS PostgreSQL port
    Value: !GetAtt NotesDatabase.Endpoint.Port