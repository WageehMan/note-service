name: Deploy Notes Service (Full Stack)

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  S3_BUCKET: cf-templates-z03e1ivmdu5u-us-east-1
  STACK_NAME: NoteServiceStack

jobs:
  # ==========================================
  # BUILD BACKEND (.NET LAMBDAS)
  # ==========================================
  build-backend:
    name: Build .NET Lambdas
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: |
          dotnet restore NoteService.DAL/NoteService.DAL.csproj
          dotnet restore NoteCrud/NoteCrud.csproj
          dotnet restore Summarize/Summarize.csproj
      
      - name: Build DAL
        run: |
          dotnet build NoteService.DAL/NoteService.DAL.csproj \
            --configuration Release \
            --no-restore
      
      - name: Build NoteCrud Lambda
        run: |
          dotnet build NoteCrud/NoteCrud.csproj \
            --configuration Release \
            --no-restore
      
      - name: Build Summarize Lambda
        run: |
          dotnet build Summarize/Summarize.csproj \
            --configuration Release \
            --no-restore
      
      - name: Publish NoteCrud Lambda
        run: |
          dotnet publish NoteCrud/NoteCrud.csproj \
            --configuration Release \
            --output NoteCrud/publish \
            --no-restore \
            --self-contained false
      
      - name: Publish Summarize Lambda
        run: |
          dotnet publish Summarize/Summarize.csproj \
            --configuration Release \
            --output Summarize/publish \
            --no-restore \
            --self-contained false
      
      - name: Create Lambda deployment packages
        run: |
          cd NoteCrud/publish
          zip -r ../note-crud-lambda.zip .
          
          cd ../../Summarize/publish
          zip -r ../summarize-lambda.zip .
      
      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: |
            NoteCrud/note-crud-lambda.zip
            Summarize/summarize-lambda.zip
          retention-days: 7

  # ==========================================
  # BUILD FRONTEND (ANGULAR)
  # ==========================================
  build-frontend:
    name: Build Angular Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: NotesService.Web/package-lock.json
      
      - name: Install dependencies
        run: |
          cd NotesService.Web
          npm ci
      
      - name: Build Angular app
        run: |
          cd NotesService.Web
          npm run build -- --configuration production
        env:
          NODE_OPTIONS: --max_old_space_size=4096
      
      - name: List build output (debug)
        run: |
          echo "Build output structure:"
          ls -la NotesService.Web/dist/
          if [ -d "NotesService.Web/dist/notes-service-web" ]; then
            ls -la NotesService.Web/dist/notes-service-web/
          fi
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: NotesService.Web/dist/
          retention-days: 7

  # ==========================================
  # DEPLOY INFRASTRUCTURE & BACKEND
  # ==========================================
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [build-backend]
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment || 'prod' }}
    
    permissions:
      id-token: write
      contents: read
    
    outputs:
      api_endpoint: ${{ steps.outputs.outputs.api_endpoint }}
      db_endpoint: ${{ steps.outputs.outputs.db_endpoint }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Lambda packages
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: .
      
      - name: Verify artifacts
        run: |
          ls -lh NoteCrud/
          ls -lh Summarize/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::468691975112:role/GitHubActionsDeployRole
          role-session-name: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
      
      - name: Verify AWS identity
        run: |
          echo "Logged in as:"
          aws sts get-caller-identity
      
      - name: Verify S3 bucket exists
        run: |
          if aws s3 ls "s3://${{ env.S3_BUCKET }}" 2>&1 > /dev/null; then
            echo "✅ Bucket exists"
          else
            echo "Creating bucket..."
            aws s3 mb s3://${{ env.S3_BUCKET }} --region ${{ env.AWS_REGION }}
          fi
      
      - name: Upload Lambda packages
        run: |
          aws s3 cp NoteCrud/note-crud-lambda.zip s3://${{ env.S3_BUCKET }}/note-crud-lambda.zip
          aws s3 cp Summarize/summarize-lambda.zip s3://${{ env.S3_BUCKET }}/summarize-lambda.zip
          echo "✅ Packages uploaded"
      
      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://infrastructure/cloudformation-template.yaml \
            --region ${{ env.AWS_REGION }}
      
      - name: Deploy CloudFormation stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            STATUS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }} --query "Stacks[0].StackStatus" --output text)
            echo "Stack exists: $STATUS"
            
            if [[ $STATUS != "CREATE_COMPLETE" && $STATUS != "UPDATE_COMPLETE" ]]; then
              echo "Deleting failed stack..."
              aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }}
              timeout 300 aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }} --region ${{ env.AWS_REGION }} || true
              WAIT_RESULT=$?
        
              if [ $WAIT_RESULT -eq 0 ]; then
                echo "Failed stack deleted successfully."
              else
                echo "Warning: Stack deletion wait timed out or failed. Continuing anyway..."
                # Add a sleep to give more time for deletion to progress
                sleep 30
              fi
              COMMAND="create-stack"
              WAIT_COMMAND="stack-create-complete"
            else
              COMMAND="update-stack"
              WAIT_COMMAND="stack-update-complete"
            fi
          else
            echo "Stack does not exist, creating..."
            COMMAND="create-stack"
            WAIT_COMMAND="stack-create-complete"
          fi
          
          echo "Running: $COMMAND"
          aws cloudformation $COMMAND \
            --stack-name ${{ env.STACK_NAME }} \
            --template-body file://infrastructure/cloudformation-template.yaml \
            --parameters file://infrastructure/parameters.json \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --tags \
              Key=Environment,Value=${{ github.event.inputs.environment || 'prod' }} \
              Key=ManagedBy,Value=GitHubActions \
              Key=Repository,Value=${{ github.repository }}
          
          echo "Waiting for stack..."
          aws cloudformation wait $WAIT_COMMAND \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Stack deployed"
      
      - name: Get stack outputs
        id: outputs
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          
          DB_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DBEndpoint`].OutputValue' \
            --output text)
          
          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          echo "db_endpoint=$DB_ENDPOINT" >> $GITHUB_OUTPUT
          
          echo "### Infrastructure Deployed! 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Endpoint:** $API_ENDPOINT" >> $GITHUB_STEP_SUMMARY
          echo "**DB Endpoint:** $DB_ENDPOINT" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # DEPLOY FRONTEND TO S3
  # ==========================================
  deploy-frontend:
    name: Deploy Frontend to S3
    needs: [build-frontend, deploy-infrastructure]
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist-download
      
      - name: Find and prepare Angular build output
        id: prepare-dist
        run: |
          echo "Downloaded structure:"
          ls -la dist-download/
          
          # Find index.html to locate the correct build folder
          INDEX_PATH=$(find dist-download -name "index.html" -type f | head -1)
          
          if [ -z "$INDEX_PATH" ]; then
            echo "❌ Error: index.html not found!"
            exit 1
          fi
          
          BUILD_DIR=$(dirname "$INDEX_PATH")
          echo "Found build output at: $BUILD_DIR"
          
          # Create a clean dist folder with files at root level
          mkdir -p dist-clean
          cp -r $BUILD_DIR/* dist-clean/
          
          echo "Clean dist structure:"
          ls -la dist-clean/
          
          echo "dist_path=dist-clean" >> $GITHUB_OUTPUT
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::468691975112:role/GitHubActionsDeployRole
          role-session-name: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Create and configure S3 bucket
        run: |
          BUCKET_NAME="notes-frontend-${{ github.event.inputs.environment || 'prod' }}"
          
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 > /dev/null; then
            echo "✅ Bucket exists"
          else
            echo "Creating bucket..."
            aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
            
            # Enable static website
            aws s3 website s3://$BUCKET_NAME/ \
              --index-document index.html \
              --error-document index.html
            
            # Disable block public access
            aws s3api put-public-access-block \
              --bucket $BUCKET_NAME \
              --public-access-block-configuration \
              "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
            
            # Set bucket policy
            cat > policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::$BUCKET_NAME/*"
            }]
          }
          EOF
            
            aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://policy.json
            echo "✅ Bucket configured"
          fi
      
      - name: Deploy to S3
        run: |
          BUCKET_NAME="notes-frontend-${{ github.event.inputs.environment || 'prod' }}"
          DIST_PATH="${{ steps.prepare-dist.outputs.dist_path }}"
          
          echo "Deploying from: $DIST_PATH"
          echo "Files to deploy:"
          ls -la $DIST_PATH/
          
          # Upload all files with cache headers
          aws s3 sync $DIST_PATH/ s3://$BUCKET_NAME/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html"
          
          # Upload HTML with no-cache
          aws s3 sync $DIST_PATH/ s3://$BUCKET_NAME/ \
            --exclude "*" \
            --include "*.html" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"
          
          FRONTEND_URL="http://$BUCKET_NAME.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
          
          echo "✅ Frontend deployed"
          echo "Frontend URL: $FRONTEND_URL"
          
          # Verify deployment
          echo ""
          echo "Verifying S3 bucket contents:"
          aws s3 ls s3://$BUCKET_NAME/ --recursive | head -20
          
          echo "### Frontend Deployed! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** [$FRONTEND_URL]($FRONTEND_URL)" >> $GITHUB_STEP_SUMMARY
          echo "**API Endpoint:** ${{ needs.deploy-infrastructure.outputs.api_endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 Open the Frontend URL to access your application!" >> $GITHUB_STEP_SUMMARY
   
  # ==========================================
  # CLEANUP ON FAILURE
  # ==========================================
  cleanup-on-failure:
    name: Cleanup on Failure
    needs: [build-backend, build-frontend, deploy-infrastructure, deploy-frontend]
    if: failure()
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Configure AWS credentials
        uses: actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::468691975112:role/GitHubActionsDeployRole
          role-session-name: GitHub-Cleanup-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Check for stuck resources
        run: |
          echo "Deployment failed. Check logs for details."